{"version":3,"file":"angular-fire-auth-guard.umd.js","sources":["../../../src/auth-guard/auth-guard.ts","../../../src/auth-guard/auth-guard.module.ts"],"names":["map","take","Injectable","Router","AngularFireAuth","of","switchMap","pipe","NgModule"],"mappings":";;;;;;;;;;;;;;QAUsC;AAAc;AAG/C;AAEJ,QALqC,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,GAAA;AAAE;AAGjD,QAHQ,QAAQ,GAAaA,aAAG;AAAQ;AAKjC;AAAY;AAA6B;AAEjC;AAAY,QAA9B,8BAAoB,MAAc,EAAU,IAAqB;AAAI,YAArE,iBAAqE;AACvE,YADsB,WAAM,GAAN,MAAM,CAAQ;AAAC,YAAS,SAAI,GAAJ,IAAI,CAAiB;AAAC,YAElE,gBAAW;AAAS;AAA+B;AAChD;AAA2B,eADhB,UAAC,IAA4B,EAAE,KAA0B;AAAI;AAC/C,oBAApB,eAAe,GAAG,mBAAA,IAAI,CAAC,IAAI,CAAC,aAAa;AAAa;AAC/D,mBAD4E,cAAM,OAAA,QAAQ,GAAA,EAAC;AAC5F,gBAAI,OAAO,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CACxBC,cAAI,CAAC,CAAC,CAAC,EACP,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,EAC5BD,aAAG;AAAO;AACe;AAE/B,mBAHU;AACL;AAAkC;AAE/B,oBAHE,GAAG;AAAI,oBACT,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE;AACtC,wBAAU,OAAO,GAAG,CAAC;AACrB,qBAAS;AAAC,yBAAK,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACvC,wBAAU,OAAO,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAChD,qBAAS;AAAC,yBAAK;AACf;AACc,wBAAJ,OAAO,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC3C,qBAAS;AACT,iBAAO,EAAC,CACH,CAAC;AACN,aAAG,EAAA;AACH;;;;;;;yGAnBuE;AACvE;AACoC,SAJ3B;AAAC;iCAHTE,aAAU,SAAC,vDAGqB;YAF/B,UAAU,EAAE,xBAIwB,gBAhBQC,SAAM;AAYjC,kBAClB,lBAbuD,gBAI/CC,kBAAe;AAAG;AAAU;AAKO;AAEvC;AACW,QAMd,2CAgBC;AACH;AAGQ;AAAqB;AAAoB;AAC/C,QAvBY,sCAAsB;AAAC;AAAY;AAAqB;AAErD;AAAY,QAFS,oCAA6B;AAAC;AAEnE;AAAqB,QAoBT,WAAW;AAAS;AAAuB;AACxC,OADW,UAAC,IAAuB,IAAK,QAAC;AACzD,QAAE,WAAW,EAAE,CAAE,oBAAoB,CAAE,EAAE,IAAI,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE;AACtE,KAAC,IAAC;AAEF;AACgB;AAAuB;AAAmB,QAAd;AAAc;AAAuB;AAC/D,QAD0B,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,GAAA;AAAE;AAC7D,QADP,cAAc,GAAaJ,aAAG;AAAQ;AAAiB;AAC3D;AAAmB,QAAW,UAAC,IAAwB,IAAK,OAAA,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAGK,OAAE,CAAC,IAAI,CAAC,GAAA;AAAE;AAC5F,QADP,aAAa,GAAGC,mBAAS;AAAQ;AAAiB;AAAuB;AAAmB,QAC9D;AAAc;AAAuB;AAC/D,QAD0B,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,GAAA;AAAE;AAC7D,QADP,aAAa,GAAaN,aAAG;AAAQ;AAAiB;AAClD;AAAmB,QAAgB;AAAc;AAAgC;AAC/F,QADiD,aAAa,IAAI,OAAA,aAAa,GAAG,aAAa,CAAC,MAAM,GAAG,EAAE,GAAA;AAAE;AAC7F,QADN,YAAY,GAAGO,SAAI,CAAC,aAAa,EAAEP,aAAG,MAA4D;AAC/G;AAAqB,QAAR,cAAc;AAAS;AACnC;AAAmB,OAAlB,UAAC,KAAK,IAAK,OAAAO,SAAI,CAAC,YAAY,EAAEP,aAAG;AAAO;AAAyB;AAC5D,OAD6B;AAAc;AAAyB;AAC5D,QADqB,MAAM,IAAK,OAAA,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,GAAA,EAAC,CAAC,GAAA;AAC5E;AAAqB,QAAT,sBAAsB;AAAS;AAA2B;AACzD,OAAZ,UAAC,QAAQ,IAAK,OAAAO,SAAI,CAAC,QAAQ,EAAEP,aAAG;AAAO;AAA2B;AACpD,OADmB;AAAc;AAC5C;AAAmB,QADW,QAAQ,IAAI,OAAA,QAAQ,IAAI,QAAQ,GAAA,EAAC,CAAC,GAAA;AACpE;AAAqB,QAAT,kBAAkB;AAAS;AAA2B;AACrD,OAAZ,UAAC,QAAQ,IAAK,OAAAO,SAAI,CAAC,QAAQ,EAAEP,aAAG;AAAO;AAA2B;AAC5D,OAD2B;AAAc;AAA2B;AAC5D,QADmB,QAAQ,IAAI,OAAA,QAAQ,IAAI,QAAQ,IAAI,IAAI,GAAA,EAAC,CAAC,GAAA;AAC5E;AAAC;AAAQ;AAAsC;AAA4C;AAAyJ;AAAQ;AAAkE,QChD/T;AAAwC;;;;;;;;gDACnC;AAAC;AAA2C,SADxC;AAAC;AAAC;AAAQ;eAHlBQ,WAAQ,SAAC,nCAIG;oBAHX,SAAS,EAAE,CAAE,oBAAoB,CAAE,kBACpC,vEAEiD;AAAyJ;AAAQ;AAAC;AAAQ;AAAsC;AAAkD;AAAyJ;AAAQ;AAAC;AAAyD;AAAqE;AAAuC;AAAyC;AAA2C;AAA6C;AAA2C;AAA6C;AAAiC;AAAqD;AAA6D;AAAC;AAAmE;AAAC;AAAM","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of, pipe, UnaryFunction } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport firebase from 'firebase/app';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\nexport type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;\nexport type AuthPipe = UnaryFunction<Observable<firebase.User|null>, Observable<boolean|string|any[]>>;\n\nexport const loggedIn: AuthPipe = map(user => !!user);\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuthGuard implements CanActivate {\n\n  constructor(private router: Router, private auth: AngularFireAuth) {}\n\n  canActivate = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n    const authPipeFactory = next.data.authGuardPipe as AuthPipeGenerator || (() => loggedIn);\n    return this.auth.user.pipe(\n      take(1),\n      authPipeFactory(next, state),\n      map(can => {\n        if (typeof can === 'boolean') {\n          return can;\n        } else if (Array.isArray(can)) {\n          return this.router.createUrlTree(can);\n        } else {\n          // TODO(EdricChan03): Add tests\n          return this.router.parseUrl(can);\n        }\n      })\n    );\n  }\n\n}\n\nexport const canActivate = (pipe: AuthPipeGenerator) => ({\n  canActivate: [ AngularFireAuthGuard ], data: { authGuardPipe: pipe }\n});\n\n\nexport const isNotAnonymous: AuthPipe = map(user => !!user && !user.isAnonymous);\nexport const idTokenResult = switchMap((user: firebase.User|null) => user ? user.getIdTokenResult() : of(null));\nexport const emailVerified: AuthPipe = map(user => !!user && user.emailVerified);\nexport const customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nexport const hasCustomClaim: (claim: string) => AuthPipe =\n  (claim) => pipe(customClaims, map(claims =>  claims.hasOwnProperty(claim)));\nexport const redirectUnauthorizedTo: (redirect: string|any[]) => AuthPipe =\n  (redirect) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nexport const redirectLoggedInTo: (redirect: string|any[]) => AuthPipe =\n  (redirect) => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuthGuard } from './auth-guard';\n\n@NgModule({\n  providers: [ AngularFireAuthGuard ]\n})\nexport class AngularFireAuthGuardModule { }\n"]}