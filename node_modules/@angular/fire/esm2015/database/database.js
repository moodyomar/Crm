/**
 * @fileoverview added by tsickle
 * Generated from: database.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';
import { getRef } from './utils';
import { createListReference } from './list/create-reference';
import { createObjectReference } from './object/create-reference';
import { FIREBASE_APP_NAME, FIREBASE_OPTIONS, ɵAngularFireSchedulers, ɵfirebaseAppFactory, ɵkeepUnstableUntilFirstFactory, } from '@angular/fire';
import 'firebase/database';
import { USE_EMULATOR as USE_AUTH_EMULATOR } from '@angular/fire/auth';
import firebase from 'firebase/app';
import { ɵfetchInstance, ɵlogAuthEmulatorError } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
import * as i2 from "@angular/fire/auth";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
export const URL = new InjectionToken('angularfire2.realtimeDatabaseURL');
/** @type {?} */
export const USE_EMULATOR = new InjectionToken('angularfire2.database.use-emulator');
export class AngularFireDatabase {
    /**
     * @param {?} options
     * @param {?} nameOrConfig
     * @param {?} databaseURL
     * @param {?} platformId
     * @param {?} zone
     * @param {?} _useEmulator
     * @param {?} useAuthEmulator
     */
    constructor(options, nameOrConfig, databaseURL, 
    // tslint:disable-next-line:ban-types
    platformId, zone, _useEmulator, // tuple isn't working here
    useAuthEmulator) {
        this.schedulers = new ɵAngularFireSchedulers(zone);
        this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);
        /** @type {?} */
        const useEmulator = _useEmulator;
        /** @type {?} */
        const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);
        if (!firebase.auth && useAuthEmulator) {
            ɵlogAuthEmulatorError();
        }
        this.database = ɵfetchInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const database = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => app.database(databaseURL || undefined)));
            if (useEmulator) {
                database.useEmulator(...useEmulator);
            }
            return database;
        }), [useEmulator]);
    }
    /**
     * @template T
     * @param {?} pathOrRef
     * @param {?=} queryFn
     * @return {?}
     */
    list(pathOrRef, queryFn) {
        /** @type {?} */
        const ref = this.schedulers.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => getRef(this.database, pathOrRef)));
        /** @type {?} */
        let query = ref;
        if (queryFn) {
            query = queryFn(ref);
        }
        return createListReference(query, this);
    }
    /**
     * @template T
     * @param {?} pathOrRef
     * @return {?}
     */
    object(pathOrRef) {
        /** @type {?} */
        const ref = this.schedulers.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => getRef(this.database, pathOrRef)));
        return createObjectReference(ref, this);
    }
    /**
     * @return {?}
     */
    createPushId() {
        /** @type {?} */
        const ref = this.schedulers.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.database.ref()));
        return ref.push().key;
    }
}
AngularFireDatabase.ɵfac = function AngularFireDatabase_Factory(t) { return new (t || AngularFireDatabase)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(URL, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(USE_EMULATOR, 8), ɵngcc0.ɵɵinject(USE_AUTH_EMULATOR, 8)); };
/** @nocollapse */
AngularFireDatabase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [URL,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_EMULATOR,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_AUTH_EMULATOR,] }] }
];
/** @nocollapse */ AngularFireDatabase.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFireDatabase_Factory() { return new AngularFireDatabase(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(URL, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.USE_EMULATOR, 8)); }, token: AngularFireDatabase, providedIn: "any" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireDatabase, [{
        type: Injectable,
        args: [{
                providedIn: 'any'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [FIREBASE_OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [FIREBASE_APP_NAME]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [URL]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [USE_EMULATOR]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [USE_AUTH_EMULATOR]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    AngularFireDatabase.prototype.database;
    /** @type {?} */
    AngularFireDatabase.prototype.schedulers;
    /** @type {?} */
    AngularFireDatabase.prototype.keepUnstableUntilFirst;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,