/**
 * @fileoverview added by tsickle
 * Generated from: user-tracking.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { AngularFireAnalytics } from './analytics';
import { AngularFireAuth } from '@angular/fire/auth';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './analytics';
import * as ɵngcc2 from '@angular/fire/auth';
export class UserTrackingService {
    // TODO a user properties injector
    /**
     * @param {?} analytics
     * @param {?} platformId
     * @param {?} auth
     * @param {?} zone
     */
    constructor(analytics, 
    // tslint:disable-next-line:ban-types
    platformId, auth, zone) {
        this.disposables = [];
        if (!isPlatformServer(platformId)) {
            /** @type {?} */
            let resolveInitialized;
            this.initialized = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => resolveInitialized = resolve))));
            this.disposables = [
                auth.authState.subscribe((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);
                    resolveInitialized();
                })),
                auth.credential.subscribe((/**
                 * @param {?} credential
                 * @return {?}
                 */
                credential => {
                    if (credential) {
                        /** @type {?} */
                        const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;
                        if (credential.additionalUserInfo.isNewUser) {
                            analytics.logEvent('sign_up', { method });
                        }
                        analytics.logEvent('login', { method });
                    }
                }))
            ];
        }
        else {
            this.initialized = Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposables.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => it.unsubscribe()));
    }
}
UserTrackingService.ɵfac = function UserTrackingService_Factory(t) { return new (t || UserTrackingService)(ɵngcc0.ɵɵinject(ɵngcc1.AngularFireAnalytics), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc2.AngularFireAuth), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
UserTrackingService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UserTrackingService, factory: UserTrackingService.ɵfac });
/** @nocollapse */
UserTrackingService.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AngularFireAuth },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserTrackingService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AngularFireAnalytics }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc2.AngularFireAuth }, { type: ɵngcc0.NgZone }]; }, null); })();
if (false) {
    /** @type {?} */
    UserTrackingService.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    UserTrackingService.prototype.disposables;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10cmFja2luZy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9hbmFseXRpY3MvdXNlci10cmFja2luZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBSXJELE1BQU0sT0FBTyxtQkFBbUI7QUFBRztBQUVsQjtBQUFRO0FBQ0Y7QUFFckI7QUFBdUI7QUFDZDtBQUNQLElBREYsWUFDRSxTQUErQjtBQUNsQyxJQUFHLHFDQUFxQztBQUN6QyxJQUF5QixVQUFrQixFQUN2QyxJQUFxQixFQUNyQixJQUFZO0FBQ2QsUUFUUSxnQkFBVyxHQUF3QixFQUFFLENBQUM7QUFDaEQsUUFVSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDdkM7QUFBNkIsZ0JBQW5CLGtCQUFrQjtBQUM1QixZQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQjtBQUFNO0FBQTJCO0FBQWdCLFlBQWhELEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTztBQUFNO0FBQWtDO0FBQ2xGO0FBQ1gsWUFGc0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLEVBQUMsRUFBQyxDQUFDO0FBQzVHLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRztBQUN6QixnQkFBVSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVM7QUFBTTtBQUNWO0FBQ2I7QUFDZCxnQkFIZ0MsSUFBSSxDQUFDLEVBQUU7QUFDMUMsb0JBQVksU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0Msb0JBQVksa0JBQWtCLEVBQUUsQ0FBQztBQUNqQyxnQkFBVSxDQUFDLEVBQUM7QUFDWixnQkFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVM7QUFBTTtBQUV6QztBQUErQjtBQUFvQixnQkFGZixVQUFVLENBQUMsRUFBRTtBQUNqRCxvQkFBWSxJQUFJLFVBQVUsRUFBRTtBQUM1QjtBQUF5Qyw4QkFBckIsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVO0FBQ2pILHdCQUFjLElBQUksVUFBVSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRTtBQUMzRCw0QkFBZ0IsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzFELHlCQUFlO0FBQ2Ysd0JBQWMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELHFCQUFhO0FBQ2IsZ0JBQVUsQ0FBQyxFQUFDO0FBQ1osYUFBTyxDQUFDO0FBQ1IsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzNDLFNBQUs7QUFDTCxJQUNFLENBQUM7QUFDSDtBQUNPO0FBQ0M7QUFBUSxJQURkLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztBQUFNO0FBRWpDO0FBQ3FCO0FBQVksUUFITCxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDO0FBQ3JELElBQUUsQ0FBQztBQUNIOytDQTFDQyxVQUFVO3lIQUNUO0FBQUM7QUFBbUI7QUFFWixZQVBELG9CQUFvQjtBQUFJLFlBY0ksTUFBTSx1QkFBdEMsTUFBTSxTQUFDLFdBQVc7QUFBUyxZQWJ2QixlQUFlO0FBQUksWUFGQyxNQUFNO0FBQUc7Ozs7Ozs2RkFBRTtBQUFDO0FBQWE7QUFBcUIsSUFRekUsMENBQTJCO0FBQzdCO0FBQVE7QUFBaUI7QUFBZ0I7QUFDekMsSUFERSwwQ0FBOEM7QUFDaEQ7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIE9uRGVzdHJveSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlQW5hbHl0aWNzIH0gZnJvbSAnLi9hbmFseXRpY3MnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVBdXRoIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hdXRoJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNlclRyYWNraW5nU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgaW5pdGlhbGl6ZWQ6IFByb21pc2U8dm9pZD47XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IEFycmF5PFN1YnNjcmlwdGlvbj4gPSBbXTtcblxuICAvLyBUT0RPIGEgdXNlciBwcm9wZXJ0aWVzIGluamVjdG9yXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFuYWx5dGljczogQW5ndWxhckZpcmVBbmFseXRpY3MsXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi10eXBlc1xuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgICBhdXRoOiBBbmd1bGFyRmlyZUF1dGgsXG4gICAgem9uZTogTmdab25lLFxuICApIHtcblxuICAgIGlmICghaXNQbGF0Zm9ybVNlcnZlcihwbGF0Zm9ybUlkKSkge1xuICAgICAgbGV0IHJlc29sdmVJbml0aWFsaXplZDtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZUluaXRpYWxpemVkID0gcmVzb2x2ZSkpO1xuICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IFtcbiAgICAgICAgICBhdXRoLmF1dGhTdGF0ZS5zdWJzY3JpYmUodXNlciA9PiB7XG4gICAgICAgICAgICBhbmFseXRpY3Muc2V0VXNlcklkKHVzZXI/LnVpZCk7XG4gICAgICAgICAgICByZXNvbHZlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBhdXRoLmNyZWRlbnRpYWwuc3Vic2NyaWJlKGNyZWRlbnRpYWwgPT4ge1xuICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWwpIHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gY3JlZGVudGlhbC51c2VyLmlzQW5vbnltb3VzID8gJ2Fub255bW91cycgOiBjcmVkZW50aWFsLmFkZGl0aW9uYWxVc2VySW5mby5wcm92aWRlcklkO1xuICAgICAgICAgICAgICBpZiAoY3JlZGVudGlhbC5hZGRpdGlvbmFsVXNlckluZm8uaXNOZXdVc2VyKSB7XG4gICAgICAgICAgICAgICAgYW5hbHl0aWNzLmxvZ0V2ZW50KCdzaWduX3VwJywgeyBtZXRob2QgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYW5hbHl0aWNzLmxvZ0V2ZW50KCdsb2dpbicsIHsgbWV0aG9kIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmZvckVhY2goaXQgPT4gaXQudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==