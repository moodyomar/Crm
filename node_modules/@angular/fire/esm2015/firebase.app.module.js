/**
 * @fileoverview added by tsickle
 * Generated from: firebase.app.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken, isDevMode, NgModule, NgZone, Optional, PLATFORM_ID, VERSION as NG_VERSION, Version } from '@angular/core';
import firebase from 'firebase/app';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function FirebaseOptions() { }
/**
 * @record
 */
export function FirebaseAppConfig() { }
/** @type {?} */
export const FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');
/** @type {?} */
export const FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig');
// Have to implement as we need to return a class from the provider, we should consider exporting
// this in the firebase/app types as this is our highest risk of breaks
export class FirebaseApp {
}
if (false) {
    /** @type {?} */
    FirebaseApp.prototype.name;
    /** @type {?} */
    FirebaseApp.prototype.options;
    /** @type {?} */
    FirebaseApp.prototype.analytics;
    /** @type {?} */
    FirebaseApp.prototype.auth;
    /** @type {?} */
    FirebaseApp.prototype.database;
    /** @type {?} */
    FirebaseApp.prototype.messaging;
    /** @type {?} */
    FirebaseApp.prototype.performance;
    /** @type {?} */
    FirebaseApp.prototype.storage;
    /** @type {?} */
    FirebaseApp.prototype.delete;
    /** @type {?} */
    FirebaseApp.prototype.firestore;
    /** @type {?} */
    FirebaseApp.prototype.functions;
    /** @type {?} */
    FirebaseApp.prototype.remoteConfig;
}
/** @type {?} */
export const VERSION = new Version('6.1.4');
/**
 * @param {?} options
 * @param {?} zone
 * @param {?=} nameOrConfig
 * @return {?}
 */
export function ɵfirebaseAppFactory(options, zone, nameOrConfig) {
    /** @type {?} */
    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';
    /** @type {?} */
    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};
    config.name = config.name || name;
    // Added any due to some inconsistency between @firebase/app and firebase types
    /** @type {?} */
    const existingApp = (/** @type {?} */ (firebase.apps.filter((/**
     * @param {?} app
     * @return {?}
     */
    app => app && app.name === config.name))[0]));
    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any
    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206
    /** @type {?} */
    const app = (/** @type {?} */ ((existingApp || zone.runOutsideAngular((/**
     * @return {?}
     */
    () => firebase.initializeApp(options, (/** @type {?} */ (config))))))));
    try {
        if (JSON.stringify(options) !== JSON.stringify(app.options)) {
            /** @type {?} */
            const hmr = !!((/** @type {?} */ (module))).hot;
            log('error', `${app.name} Firebase App already initialized with different options${hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'}`);
        }
    }
    catch (e) { }
    return app;
}
/** @type {?} */
export const ɵlogAuthEmulatorError = (/**
 * @return {?}
 */
() => {
    // TODO sort this out, https://github.com/angular/angularfire/issues/2656
    log('warn', 'You may need to import \'firebase/auth\' manually in your component rather than rely on AngularFireAuth\'s dynamic import, when using the emulator suite https://github.com/angular/angularfire/issues/2656');
});
/** @type {?} */
const log = (/**
 * @param {?} level
 * @param {...?} args
 * @return {?}
 */
(level, ...args) => {
    if (isDevMode() && typeof console !== 'undefined') {
        console[level](...args);
    }
});
const ɵ0 = log;
globalThis.ɵAngularfireInstanceCache || (globalThis.ɵAngularfireInstanceCache = new Map());
/**
 * @template T
 * @param {?} cacheKey
 * @param {?} moduleName
 * @param {?} app
 * @param {?} fn
 * @param {?} args
 * @return {?}
 */
export function ɵfetchInstance(cacheKey, moduleName, app, fn, args) {
    const [instance, ...cachedArgs] = globalThis.ɵAngularfireInstanceCache.get(cacheKey) || [];
    if (instance) {
        try {
            if (args.some((/**
             * @param {?} arg
             * @param {?} i
             * @return {?}
             */
            (arg, i) => {
                /** @type {?} */
                const cachedArg = cachedArgs[i];
                if (arg && typeof arg === 'object') {
                    return JSON.stringify(arg) !== JSON.stringify(cachedArg);
                }
                else {
                    return arg !== cachedArg;
                }
            }))) {
                /** @type {?} */
                const hmr = !!((/** @type {?} */ (module))).hot;
                log('error', `${moduleName} was already initialized on the ${app.name} Firebase App instance with different settings.${hmr ? ' You may need to reload as Firebase is not HMR aware.' : ''}`);
            }
        }
        catch (e) { }
        return instance;
    }
    else {
        /** @type {?} */
        const newInstance = fn();
        globalThis.ɵAngularfireInstanceCache.set(cacheKey, [newInstance, ...args]);
        return newInstance;
    }
}
/** @type {?} */
const FIREBASE_APP_PROVIDER = {
    provide: FirebaseApp,
    useFactory: ɵfirebaseAppFactory,
    deps: [
        FIREBASE_OPTIONS,
        NgZone,
        [new Optional(), FIREBASE_APP_NAME]
    ]
};
export class AngularFireModule {
    // tslint:disable-next-line:ban-types
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        firebase.registerVersion('angularfire', VERSION.full, platformId.toString());
        firebase.registerVersion('angular', NG_VERSION.full);
    }
    /**
     * @param {?} options
     * @param {?=} nameOrConfig
     * @return {?}
     */
    static initializeApp(options, nameOrConfig) {
        return {
            ngModule: AngularFireModule,
            providers: [
                { provide: FIREBASE_OPTIONS, useValue: options },
                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }
            ]
        };
    }
}
AngularFireModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireModule });
AngularFireModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireModule_Factory(t) { return new (t || AngularFireModule)(ɵngcc0.ɵɵinject(PLATFORM_ID)); }, providers: [FIREBASE_APP_PROVIDER] });
/** @nocollapse */
AngularFireModule.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireModule, [{
        type: NgModule,
        args: [{
                providers: [FIREBASE_APP_PROVIDER]
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS9ydW5uZXIvd29yay9hbmd1bGFyZmlyZS9hbmd1bGFyZmlyZS9zcmMvY29yZS9maXJlYmFzZS5hcHAubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLE1BQU0sRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUF1QixRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxPQUFPLEVBQ2hJLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sUUFBUSxNQUFNLGNBQWMsQ0FBQztBQUNwQztBQUNHO0FBQVc7O0FBQ2QscUNBRUM7QUFDRDtBQUNHO0FBQVc7QUFBZCx1Q0FFQztBQUNEO0FBQ0EsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFrQiwwQkFBMEIsQ0FBQztBQUMvRjtBQUFBLE1BQU0sT0FBTyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBeUMsK0JBQStCLENBQUM7QUFDNUg7QUFDaUc7QUFFakcsTUFBTSxPQUFPLFdBQVc7QUFBRyxDQWExQjtBQUNEO0FBQ1k7QUFBcUIsSUFkL0IsMkJBQWE7QUFDZjtBQUNNLElBREosOEJBQVk7QUFDZDtBQUFxQixJQUFuQixnQ0FBOEM7QUFDaEQ7QUFBcUIsSUFBbkIsMkJBQStCO0FBQ2pDO0FBQXFCLElBQW5CLCtCQUErRDtBQUNqRTtBQUFxQixJQUFuQixnQ0FBOEM7QUFDaEQ7QUFBcUIsSUFBbkIsa0NBQW9EO0FBQ3REO0FBQXFCLElBQW5CLDhCQUE4RDtBQUNoRTtBQUFxQixJQUFuQiw2QkFBNEI7QUFDOUI7QUFBcUIsSUFBbkIsZ0NBQThDO0FBQ2hEO0FBQXFCLElBQW5CLGdDQUE2RDtBQUMvRDtBQUFxQixJQUFuQixtQ0FBdUQ7QUFDekQ7QUFDQTtBQUNBLE1BQU0sT0FBTyxP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LG1CQUFtQjtBQUNqQyxJQUFFLElBQUksRUFBRTtBQUNSLFFBQUksZ0JBQWdCO0FBQ3BCLFFBQUksTUFBTTtBQUNWLFFBQUksQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLGlCQUFpQixDQUFDO0FBQ3ZDLEtBQUc7QUFDSCxDQUFDO0FBS0QsTUFBTSxPQUFPLGlCQUFpQjtBQUM5QjtBQUEwQztBQUFRO0FBQTZCO0FBQVEsSUFXckYsWUFBaUMsVUFBa0I7QUFDckQsUUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2pGLFFBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUNIO0FBQ007QUFBMEI7QUFBZ0M7QUFBbUI7QUFBUSxJQWhCekYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUF3QixFQUFFLFlBQXlDO0FBQUksUUFDMUYsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGlCQUFpQjtBQUNqQyxZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUSxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFDO0FBQ3RELGdCQUFRLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUM7QUFDNUQsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzZDQWJDLFFBQVEsU0FBQztDQUNSLFNBQVMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGNBQ25DLCtKQUNJO0FBQUM7QUFBbUI7QUFDVSxZQVdZLE1BQU0sdUJBQXRDLE1BQU0sU0FBQyxXQUFXO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDO0FBQzFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgaXNEZXZNb2RlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgTmdab25lLCBPcHRpb25hbCwgUExBVEZPUk1fSUQsIFZFUlNJT04gYXMgTkdfVkVSU0lPTiwgVmVyc2lvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuXG4vLyBJTlZFU1RJR0FURSBQdWJsaWMgdHlwZXMgZG9uJ3QgZXhwb3NlIEZpcmViYXNlT3B0aW9ucyBvciBGaXJlYmFzZUFwcENvbmZpZywgaXMgdGhpcyB0aGUgY2FzZSBhbnlsb25nZXI/XG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlT3B0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZUFwcENvbmZpZyB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGNvbnN0IEZJUkVCQVNFX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RmlyZWJhc2VPcHRpb25zPignYW5ndWxhcmZpcmUyLmFwcC5vcHRpb25zJyk7XG5leHBvcnQgY29uc3QgRklSRUJBU0VfQVBQX05BTUUgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCB1bmRlZmluZWQ+KCdhbmd1bGFyZmlyZTIuYXBwLm5hbWVPckNvbmZpZycpO1xuXG4vLyBIYXZlIHRvIGltcGxlbWVudCBhcyB3ZSBuZWVkIHRvIHJldHVybiBhIGNsYXNzIGZyb20gdGhlIHByb3ZpZGVyLCB3ZSBzaG91bGQgY29uc2lkZXIgZXhwb3J0aW5nXG4vLyB0aGlzIGluIHRoZSBmaXJlYmFzZS9hcHAgdHlwZXMgYXMgdGhpcyBpcyBvdXIgaGlnaGVzdCByaXNrIG9mIGJyZWFrc1xuZXhwb3J0IGNsYXNzIEZpcmViYXNlQXBwIGltcGxlbWVudHMgUGFydGlhbDxmaXJlYmFzZS5hcHAuQXBwPiB7XG4gIG5hbWU6IHN0cmluZztcbiAgb3B0aW9uczoge307XG4gIGFuYWx5dGljczogKCkgPT4gZmlyZWJhc2UuYW5hbHl0aWNzLkFuYWx5dGljcztcbiAgYXV0aDogKCkgPT4gZmlyZWJhc2UuYXV0aC5BdXRoO1xuICBkYXRhYmFzZTogKGRhdGFiYXNlVVJMPzogc3RyaW5nKSA9PiBmaXJlYmFzZS5kYXRhYmFzZS5EYXRhYmFzZTtcbiAgbWVzc2FnaW5nOiAoKSA9PiBmaXJlYmFzZS5tZXNzYWdpbmcuTWVzc2FnaW5nO1xuICBwZXJmb3JtYW5jZTogKCkgPT4gZmlyZWJhc2UucGVyZm9ybWFuY2UuUGVyZm9ybWFuY2U7XG4gIHN0b3JhZ2U6IChzdG9yYWdlQnVja2V0Pzogc3RyaW5nKSA9PiBmaXJlYmFzZS5zdG9yYWdlLlN0b3JhZ2U7XG4gIGRlbGV0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgZmlyZXN0b3JlOiAoKSA9PiBmaXJlYmFzZS5maXJlc3RvcmUuRmlyZXN0b3JlO1xuICBmdW5jdGlvbnM6IChyZWdpb24/OiBzdHJpbmcpID0+IGZpcmViYXNlLmZ1bmN0aW9ucy5GdW5jdGlvbnM7XG4gIHJlbW90ZUNvbmZpZzogKCkgPT4gZmlyZWJhc2UucmVtb3RlQ29uZmlnLlJlbW90ZUNvbmZpZztcbn1cblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBuZXcgVmVyc2lvbignQU5HVUxBUkZJUkUyX1ZFUlNJT04nKTtcblxuZXhwb3J0IGZ1bmN0aW9uIMm1ZmlyZWJhc2VBcHBGYWN0b3J5KG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgem9uZTogTmdab25lLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwpIHtcbiAgY29uc3QgbmFtZSA9IHR5cGVvZiBuYW1lT3JDb25maWcgPT09ICdzdHJpbmcnICYmIG5hbWVPckNvbmZpZyB8fCAnW0RFRkFVTFRdJztcbiAgY29uc3QgY29uZmlnID0gdHlwZW9mIG5hbWVPckNvbmZpZyA9PT0gJ29iamVjdCcgJiYgbmFtZU9yQ29uZmlnIHx8IHt9O1xuICBjb25maWcubmFtZSA9IGNvbmZpZy5uYW1lIHx8IG5hbWU7XG4gIC8vIEFkZGVkIGFueSBkdWUgdG8gc29tZSBpbmNvbnNpc3RlbmN5IGJldHdlZW4gQGZpcmViYXNlL2FwcCBhbmQgZmlyZWJhc2UgdHlwZXNcbiAgY29uc3QgZXhpc3RpbmdBcHAgPSBmaXJlYmFzZS5hcHBzLmZpbHRlcihhcHAgPT4gYXBwICYmIGFwcC5uYW1lID09PSBjb25maWcubmFtZSlbMF0gYXMgYW55O1xuICAvLyBXZSBzdXBwb3J0IEZpcmViYXNlQ29uZmlnLCBpbml0aWFsaXplQXBwJ3MgcHVibGljIHR5cGUgb25seSBhY2NlcHRzIHN0cmluZzsgbmVlZCB0byBjYXN0IGFzIGFueVxuICAvLyBDb3VsZCBiZSBzb2x2ZWQgd2l0aCBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL3B1bGwvMTIwNlxuICBjb25zdCBhcHAgPSAoZXhpc3RpbmdBcHAgfHwgem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBmaXJlYmFzZS5pbml0aWFsaXplQXBwKG9wdGlvbnMsIGNvbmZpZyBhcyBhbnkpKSkgYXMgRmlyZWJhc2VBcHA7XG4gIHRyeSB7XG4gICAgaWYgKEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpICE9PSBKU09OLnN0cmluZ2lmeShhcHAub3B0aW9ucykpIHtcbiAgICAgIGNvbnN0IGhtciA9ICEhKG1vZHVsZSBhcyBhbnkpLmhvdDtcbiAgICAgIGxvZygnZXJyb3InLCBgJHthcHAubmFtZX0gRmlyZWJhc2UgQXBwIGFscmVhZHkgaW5pdGlhbGl6ZWQgd2l0aCBkaWZmZXJlbnQgb3B0aW9ucyR7aG1yID8gJywgeW91IG1heSBuZWVkIHRvIHJlbG9hZCBhcyBGaXJlYmFzZSBpcyBub3QgSE1SIGF3YXJlLicgOiAnLid9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cbiAgcmV0dXJuIGFwcDtcbn1cblxuZXhwb3J0IGNvbnN0IMm1bG9nQXV0aEVtdWxhdG9yRXJyb3IgPSAoKSA9PiB7XG4gIC8vIFRPRE8gc29ydCB0aGlzIG91dCwgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhcmZpcmUvaXNzdWVzLzI2NTZcbiAgbG9nKCd3YXJuJywgJ1lvdSBtYXkgbmVlZCB0byBpbXBvcnQgXFwnZmlyZWJhc2UvYXV0aFxcJyBtYW51YWxseSBpbiB5b3VyIGNvbXBvbmVudCByYXRoZXIgdGhhbiByZWx5IG9uIEFuZ3VsYXJGaXJlQXV0aFxcJ3MgZHluYW1pYyBpbXBvcnQsIHdoZW4gdXNpbmcgdGhlIGVtdWxhdG9yIHN1aXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXJmaXJlL2lzc3Vlcy8yNjU2Jyk7XG59O1xuXG5jb25zdCBsb2cgPSAobGV2ZWw6ICdsb2cnfCdlcnJvcid8J2luZm8nfCd3YXJuJywgLi4uYXJnczogYW55KSA9PiB7XG4gIGlmIChpc0Rldk1vZGUoKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlW2xldmVsXSguLi5hcmdzKTtcbiAgfVxufTtcblxuZ2xvYmFsVGhpcy7JtUFuZ3VsYXJmaXJlSW5zdGFuY2VDYWNoZSB8fD0gbmV3IE1hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gybVmZXRjaEluc3RhbmNlPFQ+KGNhY2hlS2V5OiBhbnksIG1vZHVsZU5hbWU6IHN0cmluZywgYXBwOiBGaXJlYmFzZUFwcCwgZm46ICgpID0+IFQsIGFyZ3M6IGFueVtdKTogVCB7XG4gIGNvbnN0IFtpbnN0YW5jZSwgLi4uY2FjaGVkQXJnc10gPSBnbG9iYWxUaGlzLsm1QW5ndWxhcmZpcmVJbnN0YW5jZUNhY2hlLmdldChjYWNoZUtleSkgfHwgW107XG4gIGlmIChpbnN0YW5jZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoYXJncy5zb21lKChhcmcsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY2FjaGVkQXJnID0gY2FjaGVkQXJnc1tpXTtcbiAgICAgICAgaWYgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpICE9PSBKU09OLnN0cmluZ2lmeShjYWNoZWRBcmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhcmcgIT09IGNhY2hlZEFyZztcbiAgICAgICAgfVxuICAgICAgfSkpIHtcbiAgICAgICAgY29uc3QgaG1yID0gISEobW9kdWxlIGFzIGFueSkuaG90O1xuICAgICAgICBsb2coJ2Vycm9yJywgYCR7bW9kdWxlTmFtZX0gd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQgb24gdGhlICR7YXBwLm5hbWV9IEZpcmViYXNlIEFwcCBpbnN0YW5jZSB3aXRoIGRpZmZlcmVudCBzZXR0aW5ncy4ke2htciA/ICcgWW91IG1heSBuZWVkIHRvIHJlbG9hZCBhcyBGaXJlYmFzZSBpcyBub3QgSE1SIGF3YXJlLicgOiAnJ31gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbmV3SW5zdGFuY2UgPSBmbigpO1xuICAgIGdsb2JhbFRoaXMuybVBbmd1bGFyZmlyZUluc3RhbmNlQ2FjaGUuc2V0KGNhY2hlS2V5LCBbbmV3SW5zdGFuY2UsIC4uLmFyZ3NdKTtcbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH1cbn1cblxuY29uc3QgRklSRUJBU0VfQVBQX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBGaXJlYmFzZUFwcCxcbiAgdXNlRmFjdG9yeTogybVmaXJlYmFzZUFwcEZhY3RvcnksXG4gIGRlcHM6IFtcbiAgICBGSVJFQkFTRV9PUFRJT05TLFxuICAgIE5nWm9uZSxcbiAgICBbbmV3IE9wdGlvbmFsKCksIEZJUkVCQVNFX0FQUF9OQU1FXVxuICBdXG59O1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFtGSVJFQkFTRV9BUFBfUFJPVklERVJdXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaXJlTW9kdWxlIHtcbiAgc3RhdGljIGluaXRpYWxpemVBcHAob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QW5ndWxhckZpcmVNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEFuZ3VsYXJGaXJlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBGSVJFQkFTRV9PUFRJT05TLCB1c2VWYWx1ZTogb3B0aW9uc30sXG4gICAgICAgIHtwcm92aWRlOiBGSVJFQkFTRV9BUFBfTkFNRSwgdXNlVmFsdWU6IG5hbWVPckNvbmZpZ31cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi10eXBlc1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QpIHtcbiAgICBmaXJlYmFzZS5yZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCBwbGF0Zm9ybUlkLnRvU3RyaW5nKCkpO1xuICAgIGZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbignYW5ndWxhcicsIE5HX1ZFUlNJT04uZnVsbCk7XG4gIH1cbn1cbiJdfQ==