/**
 * @fileoverview added by tsickle
 * Generated from: performance.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional } from '@angular/core';
import { AngularFirePerformance } from './performance';
import { PerformanceMonitoringService } from './performance.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './performance';
import * as ɵngcc2 from './performance.service';
export class AngularFirePerformanceModule {
    /**
     * @param {?} perf
     * @param {?} _
     */
    constructor(perf, _) {
        // call anything here to get perf loading
        // tslint:disable-next-line:no-unused-expression
        perf.dataCollectionEnabled.then((/**
         * @return {?}
         */
        () => { }));
    }
}
AngularFirePerformanceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFirePerformanceModule });
AngularFirePerformanceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFirePerformanceModule_Factory(t) { return new (t || AngularFirePerformanceModule)(ɵngcc0.ɵɵinject(ɵngcc1.AngularFirePerformance), ɵngcc0.ɵɵinject(ɵngcc2.PerformanceMonitoringService, 8)); }, providers: [AngularFirePerformance] });
/** @nocollapse */
AngularFirePerformanceModule.ctorParameters = () => [
    { type: AngularFirePerformance },
    { type: PerformanceMonitoringService, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformanceModule, [{
        type: NgModule,
        args: [{
                providers: [AngularFirePerformance]
            }]
    }], function () { return [{ type: ɵngcc1.AngularFirePerformance }, { type: ɵngcc2.PerformanceMonitoringService, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9wZXJmb3JtYW5jZS9wZXJmb3JtYW5jZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFLckUsTUFBTSxPQUFPLDRCQUE0QjtBQUN6QztBQUFRO0FBQ1E7QUFDZDtBQUFRLElBRlIsWUFDRSxJQUE0QixFQUNoQixDQUErQjtBQUM1QyxRQUNDLHlDQUF5QztBQUM3QyxRQUFJLGdEQUFnRDtBQUNwRCxRQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJO0FBQU07QUFHOUI7QUFBWSxRQUhhLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFBQyxDQUFDO0FBQzlDLElBQUUsQ0FBQztBQUNIO3dEQVpDLFFBQVEsU0FBQyxrQkFDUixTQUFTO0NBQUUsQ0FBRSxzQkFBc0IsQ0FBRSxjQUN0QyxzUkFDSTtBQUFDO0FBQW1CO0FBRUwsWUFSWCxzQkFBc0I7QUFBSSxZQUMxQiw0QkFBNEIsdUJBUWhDLFFBQVE7QUFBTTs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVQZXJmb3JtYW5jZSB9IGZyb20gJy4vcGVyZm9ybWFuY2UnO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VNb25pdG9yaW5nU2VydmljZSB9IGZyb20gJy4vcGVyZm9ybWFuY2Uuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogWyBBbmd1bGFyRmlyZVBlcmZvcm1hbmNlIF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpcmVQZXJmb3JtYW5jZU1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHBlcmY6IEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2UsXG4gICAgQE9wdGlvbmFsKCkgXzogUGVyZm9ybWFuY2VNb25pdG9yaW5nU2VydmljZVxuICApIHtcbiAgICAvLyBjYWxsIGFueXRoaW5nIGhlcmUgdG8gZ2V0IHBlcmYgbG9hZGluZ1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgIHBlcmYuZGF0YUNvbGxlY3Rpb25FbmFibGVkLnRoZW4oKCkgPT4ge30pO1xuICB9XG59XG4iXX0=