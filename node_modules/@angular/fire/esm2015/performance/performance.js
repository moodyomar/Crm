/**
 * @fileoverview added by tsickle
 * Generated from: performance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';
import { EMPTY, Observable, of } from 'rxjs';
import { map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { FirebaseApp, ɵapplyMixins, ɵlazySDKProxy } from '@angular/fire';
import { isPlatformBrowser } from '@angular/common';
import { proxyPolyfillCompat } from './base';
import { ɵfetchInstance } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
// SEMVER @ v6, drop and move core ng metrics to a service
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/fire';
export const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken('angularfire2.performance.auto_trace');
/** @type {?} */
export const INSTRUMENTATION_ENABLED = new InjectionToken('angularfire2.performance.instrumentationEnabled');
/** @type {?} */
export const DATA_COLLECTION_ENABLED = new InjectionToken('angularfire2.performance.dataCollectionEnabled');
// WARNING: interface has both a type and a value, skipping emit
export class AngularFirePerformance {
    /**
     * @param {?} app
     * @param {?} instrumentationEnabled
     * @param {?} dataCollectionEnabled
     * @param {?} zone
     * @param {?} platformId
     */
    constructor(app, instrumentationEnabled, dataCollectionEnabled, zone, 
    // tslint:disable-next-line:ban-types
    platformId) {
        this.zone = zone;
        this.performance = of(undefined).pipe(switchMap((/**
         * @return {?}
         */
        () => isPlatformBrowser(platformId) ? zone.runOutsideAngular((/**
         * @return {?}
         */
        () => import('firebase/performance'))) : EMPTY)), map((/**
         * @return {?}
         */
        () => ɵfetchInstance(`performance`, 'AngularFirePerformance', app, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const performance = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => app.performance()));
            if (instrumentationEnabled === false) {
                performance.instrumentationEnabled = false;
            }
            if (dataCollectionEnabled === false) {
                performance.dataCollectionEnabled = false;
            }
            return performance;
        }), [instrumentationEnabled, dataCollectionEnabled]))), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, this.performance, zone);
    }
}
AngularFirePerformance.ɵfac = function AngularFirePerformance_Factory(t) { return new (t || AngularFirePerformance)(ɵngcc0.ɵɵinject(ɵngcc1.FirebaseApp), ɵngcc0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), ɵngcc0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
/** @nocollapse */
AngularFirePerformance.ctorParameters = () => [
    { type: FirebaseApp },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INSTRUMENTATION_ENABLED,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DATA_COLLECTION_ENABLED,] }] },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ AngularFirePerformance.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFirePerformance_Factory() { return new AngularFirePerformance(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), i0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: AngularFirePerformance, providedIn: "any" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformance, [{
        type: Injectable,
        args: [{
                providedIn: 'any'
            }]
    }], function () { return [{ type: ɵngcc1.FirebaseApp }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INSTRUMENTATION_ENABLED]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DATA_COLLECTION_ENABLED]
            }] }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.performance;
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.zone;
}
/** @type {?} */
const trace$ = (/**
 * @param {?} traceId
 * @return {?}
 */
(traceId) => {
    if (typeof window !== 'undefined' && window.performance) {
        /** @type {?} */
        const entries = window.performance.getEntriesByName(traceId, 'measure') || [];
        /** @type {?} */
        const startMarkName = `_${traceId}Start[${entries.length}]`;
        /** @type {?} */
        const endMarkName = `_${traceId}End[${entries.length}]`;
        return new Observable((/**
         * @param {?} emitter
         * @return {?}
         */
        emitter => {
            window.performance.mark(startMarkName);
            emitter.next();
            return {
                unsubscribe: (/**
                 * @return {?}
                 */
                () => {
                    window.performance.mark(endMarkName);
                    window.performance.measure(traceId, startMarkName, endMarkName);
                })
            };
        }));
    }
    else {
        return EMPTY;
    }
});
const ɵ0 = trace$;
/** @type {?} */
export const traceUntil = (/**
 * @template T
 * @param {?} name
 * @param {?} test
 * @param {?=} options
 * @return {?}
 */
(name, test, options) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @param {?} a
     * @return {?}
     */
    a => test(a) && traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => options && options.orComplete && traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceWhile = (/**
 * @template T
 * @param {?} name
 * @param {?} test
 * @param {?=} options
 * @return {?}
 */
(name, test, options) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    let traceSubscription;
    return source$.pipe(tap((/**
     * @param {?} a
     * @return {?}
     */
    a => {
        if (test(a)) {
            traceSubscription = traceSubscription || trace$(name).subscribe();
        }
        else {
            if (traceSubscription) {
                traceSubscription.unsubscribe();
            }
            traceSubscription = undefined;
        }
    }), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceUntilComplete = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceUntilFirst = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => {
    }))).subscribe(subscriber);
}))));
/** @type {?} */
export const trace = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
ɵapplyMixins(AngularFirePerformance, [proxyPolyfillCompat]);
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,